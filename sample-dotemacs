;;
;; Load the start file.
;;

(let* ((this-file (file-truename load-file-name))
       (this-dir (substring (file-name-directory this-file) 0 -1)))
  (load (format "%s/start" this-dir)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; everything else in this file is OPTIONAL but you may find some of
;; it useful
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; look and feel
;;

; solarized, slightly customized
(require 'solarized)

(defun my-childtheme ()
  (let (
        (mode-line   "#094757") ; lighter version of base02
        (mode-line-d "#083a47") ; darker version of mode-line
        )
    (custom-theme-set-faces
     theme-name
     `(cursor ((,class (:background ,yellow-l))))
     `(font-lock-comment-face ((,class (:foreground ,green))))
     `(font-lock-comment-delimiter-face ((,class (:foreground ,green))))
     `(font-lock-constant-face ((,class (:foreground ,cyan :weight bold))))
     `(font-lock-function-name-face ((,class (:foreground ,yellow))))
     `(font-lock-keyword-face ((,class (:foreground ,blue :weight bold))))
     `(font-lock-string-face ((,class (:foreground ,red))))
     `(font-lock-type-face ((,class (:foreground ,orange))))
     `(git-gutter:added ((,class (:foreground ,green :background ,green))))
     `(git-gutter:deleted ((,class (:foreground ,red :background ,red))))
     `(git-gutter:modified ((,class (:foreground ,blue :background ,blue))))
     `(mode-line ((,class (:background ,mode-line))))
     `(mode-line-inactive ((,class (:background ,mode-line-d))))
     )))

(deftheme my-theme)
(create-solarized-theme 'dark 'my-theme 'my-childtheme)

;; fix some faces when running in a shell
(when (not window-system)
  (let ((fg "white") (bg "black"))
    (set-face-background 'default bg)
    (set-face-foreground 'region bg)
    (set-face-background 'region fg)))

;; font
(when window-system
  (set-face-font 'default
                 (cond
                  (is-win32 "Andale-10")
                  ((> (x-display-pixel-height) 900) "Inconsolata-14")
                  (t "Inconsolata-12"))))

;;
;; keys
;;

(global-set-key [f3]  'vc-diff)
(global-set-key [f7]  'find-file-in-project)
(global-set-key [f8]  'grep)
(global-set-key "\C-\M-q" 'backward-up-list-indent)
(global-set-key "\M-," 'tags-search-tags-table)
(global-set-key "\M-." 'find-file-in-project)

(defun my-find-file-hook ()
  ;; tab is always my-hippie-tab
  (local-set-key "\t" 'my-hippie-tab)
  ;; delete is always hungry
  (local-set-key "\177" 'backward-delete-char-untabify)
  )
(add-hook 'find-file-hooks 'my-find-file-hook)


;;
;; other stuff
;;

;; turn on ido
(require 'ido)

;; i like delete to be hungry
(setq
 backward-delete-char-untabify-method 'all
 )

;; get rid of trailing whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

; temporary highlight on undo or yank
(require 'volatile-highlights)
(volatile-highlights-mode t)
