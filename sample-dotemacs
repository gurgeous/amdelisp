;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; To get started with emacs:
;;
;; 1. Set the AMDELISP variable to point to the elisp/ directory. For
;;    example:

(defvar AMDELISP (format "%s/elisp" (getenv "HOME")))

;; 2. Load the start file.
(load (format "%s/start" AMDELISP))






      

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; everything else in this file is OPTIONAL but you may find some of
;; it useful
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; look and feel
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; color theme

(load "solarized-theme")
(load-theme 'solarized-dark t)

(let ((class '((class color) (min-colors 89)))
      (yellow    "#b58900")
      (orange    "#cb4b16")
      (red       "#dc322f")
      (magenta   "#d33682")
      (violet    "#6c71c4")
      (blue      "#268bd2")
      (cyan      "#2aa198")
      (green     "#859900")
      (yellow-l  "#DEB542"))
  (custom-theme-set-faces
   'user
   `(cursor ((,class (:background ,yellow-l))))
   `(font-lock-constant-face ((,class (:foreground ,cyan :weight bold))))
   `(font-lock-function-name-face ((,class (:foreground ,yellow))))
   `(font-lock-keyword-face ((,class (:foreground ,blue :weight bold))))
   `(font-lock-string-face ((,class (:foreground ,red))))
   `(font-lock-type-face ((,class (:foreground ,orange))))
   ))

;; set background to black when running in a shell
(when (not window-system)
  (set-background-color "black")
  (set-face-background 'default "black")
  (set-face-background 'region "black"))
  
;; window settings
(when window-system
  (if (> (x-display-pixel-width) 1280)
      (setq window-columns 120))
  
  (set-face-attribute 'default nil :font
                      (cond
                       (is-win32 "Andale-10")
                       ((> (x-display-pixel-width) 1280)
                        "Inconsolata-14")
                       "Inconsolata-13"))

  ;; highlight line-mode
  (global-hl-line-mode)

  ;; confirm when quit
  (setq confirm-before-kill-emacs t))

;; i don't like menus...
(menu-bar-mode 0)

;; personally i like transient-mark-mode
(transient-mark-mode t)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; modes

;; turn on global-auto-revert-mode
(global-auto-revert-mode 1)

;; but leave it off for TAGS files
;; (defun turn-off-auto-revert-hook ()
;;   "If this is a TAGS file, turn off auto-revert."
;;   (when (string= (buffer-name) "TAGS")
;;     (setq global-auto-revert-ignore-buffer t)))
;; (add-hook 'find-file-hooks 'turn-off-auto-revert-hook)

; no tramp, please
(setq tramp-mode nil)

; turn on ido
(require 'ido)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; random settings

(setq
 backward-delete-char-untabify-method 'all
 sort-fold-case t
 tags-add-tables t
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; keys

(global-set-key [f3]  'vc-diff)
(global-set-key [f7] 'find-file-in-project)
(global-set-key [f8]  'grep)
(global-set-key [f12] 'next-error)
(global-set-key "\C-\M-q" 'backward-up-list-indent)
(global-set-key "\M-," 'tags-search-tags-table)
(global-set-key "\M-." 'find-file-in-project)

(defun my-find-file-hook ()
  (local-set-key "\t" 'clever-hippie-tab)
  (local-set-key "\177" 'backward-delete-char-untabify)
  )
(add-hook 'find-file-hooks 'my-find-file-hook)
